<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Run Kikoeru from source code</title>
      <link href="/2023/02/12/kikoeru/"/>
      <url>/2023/02/12/kikoeru/</url>
      
        <content type="html"><![CDATA[<h1 id="Kikoeru-express-Back-end-v6-2"><a href="#Kikoeru-express-Back-end-v6-2" class="headerlink" title="Kikoeru-express (Back-end) v6.2"></a>Kikoeru-express (Back-end) v6.2</h1><h2 id="Check-the-nodejs-version"><a href="#Check-the-nodejs-version" class="headerlink" title="Check the nodejs version"></a>Check the nodejs version</h2><p>Install Kikoeru v6.2 required nodejs version of <del>v14.17.0</del> v14.15.0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> n$ n <span class="token number">14.15</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>After changed the node version to 14.15.0.<br>npm version will also be changed <del>6.14.13</del> 6.14.8 at the same time.</p><h2 id="If-node-pre-gyp-Permission-denied"><a href="#If-node-pre-gyp-Permission-denied" class="headerlink" title="If node-pre-gyp: Permission denied"></a>If node-pre-gyp: Permission denied</h2><p>Reinstall the <code>node-pre-gyp</code> module </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> node-pre-gyp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Read-x2F-Write-permission-error"><a href="#Read-x2F-Write-permission-error" class="headerlink" title="Read&#x2F;Write permission error"></a>Read&#x2F;Write permission error</h2><p>If while installing, return such error </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: EACCES: permission denied, <span class="token function">open</span> <span class="token string">'/root/kikoeru-express-0.6.2/node_modules/sqlite3/package.json'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Must give npm <code>sudo</code> permission</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Generate-binary-files"><a href="#Generate-binary-files" class="headerlink" title="Generate binary files"></a>Generate binary files</h2><p>The <code>pkg</code> must be installed first</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> pkg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Make sure the front-end files in project parent directory<br></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pkg package.json <span class="token parameter variable">-t</span> node14-linux-x64 --out-path package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>A package folder will be created after this command executed, and it wll contain a single linux executable binary file.<br></p><div class="note info"><h4 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h4><p>if binary files created failed, and it prompts need files from a javascript. <br><br><img src="https://raw.ashless.io/img/pkg-error.png" alt="pkg error!"></p><p>Just create the files it needs. Then rerun above command.</p></div><p>After the binary file is created, put <code>node_sqlite3.node</code> next to executable binary file(in the same directory).</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> <span class="token operator">&lt;</span>project parent directory<span class="token operator">></span>/node_modules/sqlite3/lib/binding/napi-v3-linux-x64/node_sqlite3.node ./package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Then now you can execute the binary file.</p><h1 id="Kikoeru-quasar-Front-end-v6-2"><a href="#Kikoeru-quasar-Front-end-v6-2" class="headerlink" title="Kikoeru-quasar (Front-end) v6.2"></a>Kikoeru-quasar (Front-end) v6.2</h1><p>For front-end of the kikoeru, you can choose to download pre-compiled front-end files from <a href="https://github.com/kikoeru-project/kikoeru-quasar">kikoeru prject</a>. Or you can download front-end <a href="https://github.com/kikoeru-project/kikoeru-quasar">source code</a> and compile it yourself. </p><h2 id="Comile-source-code"><a href="#Comile-source-code" class="headerlink" title="Comile source code"></a>Comile source code</h2><p>First, in kikoeru-quasar directory. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>After it finishs installing, you need to install quasar too in order to compile front-end files.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> i <span class="token parameter variable">-g</span> @quasar/cli <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Modifiy the source code as you wish. After you finish, there are two way to generate front-end files.<br></p><p>1.SPA</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ quasar build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.PWA</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ quasar build <span class="token parameter variable">-m</span> pwa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> EN </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Git commands</title>
      <link href="/2023/02/05/gitcmd/"/>
      <url>/2023/02/05/gitcmd/</url>
      
        <content type="html"><![CDATA[<h3 id="Pre"><a href="#Pre" class="headerlink" title="Pre"></a>Pre</h3><p>You should set your global user name and email before going through next operations <p><br>With no correct user name and user email will result your commit with no </p><h3 id="Init-repo"><a href="#Init-repo" class="headerlink" title="Init repo"></a>Init repo</h3><p>When in the working directory do this <br></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Add-files-to-stage"><a href="#Add-files-to-stage" class="headerlink" title="Add files to stage"></a>Add files to stage</h3><p>While in your working directory using below command to add files to stage. <br></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Check-git-status"><a href="#Check-git-status" class="headerlink" title="Check git status"></a>Check git status</h3><p>After add files to git stage, we have to make sure we successfully add files to stage. <br></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Git-commit"><a href="#Git-commit" class="headerlink" title="Git commit"></a>Git commit</h3><p>If the files are in git stage level, then it is time to commit them (but not yet push to your cloud repository) <br></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"first commit"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>With <code>-m</code> flag, to give your commit a <strong>comment</strong> states what this commit is about. </p><h3 id="Git-push"><a href="#Git-push" class="headerlink" title="Git push"></a>Git push</h3><div class="note warning"><h4 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h4><p>Before push your files to cloud repository, you have to check your branch name.</p></div><p>If you haven’t set the global branch name as <code>main</code>, use command below:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-M</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The git’s default branch name will be <code>master</code> which is abandoned by Github.  </p><h3 id="Set-remote-origin"><a href="#Set-remote-origin" class="headerlink" title="Set remote origin"></a>Set remote origin</h3><div class="note info"><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>You have to get your private key ready for commit files to Github.</p></div><p>Now after you committed your files and set the correct branch name, before you can push your files to cloud repository. You have to set the origin address to which cloud repository you want to push,  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token operator">&lt;</span>your cloud repository address<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Final-step-git-push"><a href="#Final-step-git-push" class="headerlink" title="Final step: git push"></a>Final step: git push</h3><p>The final step is to push your staged files to cloud repository</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Change-exist-remote-url"><a href="#Change-exist-remote-url" class="headerlink" title="Change exist remote url"></a>Change exist remote url</h3><p>If you want to change your local repository remote url. It could be done by this following command.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span> //check <span class="token keyword">for</span> remote urls first$ <span class="token function">git</span> remote set-url origin <span class="token operator">&lt;</span>your new repository url<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Reset-any-modified-files-to-previous-commit"><a href="#Reset-any-modified-files-to-previous-commit" class="headerlink" title="Reset any modified files to previous commit"></a>Reset any modified files to previous commit</h3><p>If you want to reset modified file back to previous commit. <br><br>Below command will achieve this. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>previous commit<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> EN </tag>
            
            <tag> Linux </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Video Insertion Script</title>
      <link href="/2023/01/24/pyvideoscript/"/>
      <url>/2023/01/24/pyvideoscript/</url>
      
        <content type="html"><![CDATA[<h2 id="Multiple-videos-insert-python-script"><a href="#Multiple-videos-insert-python-script" class="headerlink" title="Multiple videos insert python script"></a>Multiple videos insert python script</h2><p>This script is used to insert multiple videos into one media video. And it has the ability to change the media container. (flv to mp4)</p><h3 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h3><ol><li>ffmpeg (will be better if your install to $PATH)</li><li>Python version above 3.9.x</li></ol><h3 id="Github-repo"><a href="#Github-repo" class="headerlink" title="Github repo"></a>Github repo</h3><p><a href="https://github.com/ashlesss/multiple_video_insertion">Multiple video insertion python script</a></p><h3 id="Windows-version"><a href="#Windows-version" class="headerlink" title="Windows version"></a>Windows version</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token keyword">import</span> shutil<span class="token punctuation">,</span> glob<span class="token keyword">import</span> logging<span class="token punctuation">,</span> sys<span class="token comment"># This script only support file name format as </span><span class="token comment"># "streamer_2023-01-26_15-46-00.mp4"</span><span class="token comment"># and only mp4 videos will be processed</span><span class="token comment">###### Rerender container</span><span class="token comment">###### Global</span>work_path <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>processed_dir <span class="token operator">=</span> work_path <span class="token operator">+</span> <span class="token string">"\\processed\\"</span><span class="token comment">###### Logger file</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'insert.log'</span><span class="token punctuation">,</span>                    filemode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span>                    level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span>                     <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'[%(asctime)s] [%(levelname)s] - %(message)s'</span><span class="token punctuation">)</span><span class="token comment"># Console logger</span>logFormatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'[%(asctime)s] [%(levelname)s] - %(message)s'</span><span class="token punctuation">)</span>rootLogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>consoleHandler <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>consoleHandler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>logFormatter<span class="token punctuation">)</span>rootLogger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>consoleHandler<span class="token punctuation">)</span><span class="token comment">#logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    videos <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>work_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filename<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            videos <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>videos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#print("No MP4 files in the working directory, quitting ")</span>        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"No MP4 files in the working directory, quitting "</span><span class="token punctuation">)</span>        quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment">#print(str(videos) + " MP4 files detected, Starting.")</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>videos<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" MP4 files detected, Starting."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>processed_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#print("History cache detected, cleaning.")</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"History cache detected, cleaning."</span><span class="token punctuation">)</span>        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>processed_dir<span class="token punctuation">)</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>processed_dir<span class="token punctuation">)</span>        <span class="token comment">#print('"processed" folder created successfully!')</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Old "processed" folder created successfully! Videos processing will start after 5 seconds.'</span><span class="token punctuation">)</span>        <span class="token comment">#print("Videos processing will start after 5 seconds.")</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>processed_dir<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'New "processed" folder created successfully! Videos processing will start after 5 seconds.'</span><span class="token punctuation">)</span>        <span class="token comment">#print('"processed" folder created successfully!')</span>        <span class="token comment">#print("Videos processing will start after 5 seconds.")</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># if not os.path.exists(processed_dir):</span><span class="token comment">#     os.makedirs(processed_dir)</span><span class="token comment">#     print('"processed" folder created successfully!')</span><span class="token comment">#     print("Videos processing will start after 5 seconds.")</span><span class="token comment"># time.sleep(5)</span><span class="token keyword">def</span> <span class="token function">rerender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>work_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filename<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#or .avi, .mpeg, whatever.</span>            ctlex <span class="token operator">=</span> <span class="token string">"ffmpeg -i "</span> <span class="token operator">+</span> <span class="token string">'"'</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">'"'</span> <span class="token operator">+</span> <span class="token string">" -c copy "</span> <span class="token operator">+</span> <span class="token string">'"'</span> <span class="token operator">+</span> processed_dir <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">'"'</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>            logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"rerender ctl: "</span> <span class="token operator">+</span> ctlex<span class="token punctuation">)</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>ctlex<span class="token punctuation">)</span>            <span class="token comment">#print("ffmpeg -i " + filename + " -c copy " + processed_dir + filename + "")</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token comment">#print("All files rerender completed!")</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"All files rerender completed!"</span><span class="token punctuation">)</span><span class="token comment">###### Post processing(insert videos)</span><span class="token keyword">def</span> <span class="token function">creat_meg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>processed_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filename<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>processed_dir <span class="token operator">+</span> <span class="token string">"merge.txt"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filename<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".mp4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>processed_dir <span class="token operator">+</span> <span class="token string">"merge.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"file '"</span> <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">"'"</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>    <span class="token comment">#print("merge.txt is successfully created!")</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"merge.txt is successfully created!"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">insertvid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">#print("Videos insertion will start after 5 second")</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Videos insertion will start after 5 second"</span><span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>processed_dir <span class="token operator">+</span> <span class="token string">"merge.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>    <span class="token comment">#print(file.readline()[6:23])</span>    filename <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    fname <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>filename<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#print(fname)</span>    ctlex <span class="token operator">=</span> <span class="token string">"ffmpeg -fflags +discardcorrupt -f concat -safe 0 -i "</span> <span class="token operator">+</span> processed_dir <span class="token operator">+</span> <span class="token string">"merge.txt -c copy "</span> <span class="token operator">+</span> <span class="token string">'"'</span> <span class="token operator">+</span> fname <span class="token operator">+</span> <span class="token string">".mp4"</span> <span class="token operator">+</span> <span class="token string">'"'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"Insert ctl: "</span> <span class="token operator">+</span> ctlex<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>ctlex<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cleaner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#print("All operations ran successfully, deleting cache in 5 seconds!")</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"All operations ran successfully, deleting cache in 5 seconds!"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>processed_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>processed_dir<span class="token punctuation">)</span>        <span class="token comment">#print("processed folder removed successfully!")</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'"processed" folder removed successfully!'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment">#print("No such directly, quit!")</span>        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"No such directly, quit!"</span><span class="token punctuation">)</span>        quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    check<span class="token punctuation">(</span><span class="token punctuation">)</span>    init_job<span class="token punctuation">(</span><span class="token punctuation">)</span>    rerender<span class="token punctuation">(</span><span class="token punctuation">)</span>    creat_meg<span class="token punctuation">(</span><span class="token punctuation">)</span>    insertvid<span class="token punctuation">(</span><span class="token punctuation">)</span>    cleaner<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This script <strong>ONLY</strong> supports file name format as “streamer_2023-01-26_15-46-00.mp4” and <strong>ONLY</strong> mp4 videos will be processed. </p>]]></content>
      
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
            <tag> EN </tag>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg Basic commands</title>
      <link href="/2023/01/10/ffmpeg/"/>
      <url>/2023/01/10/ffmpeg/</url>
      
        <content type="html"><![CDATA[<h2 id="Basic-commands-for-FFmpeg"><a href="#Basic-commands-for-FFmpeg" class="headerlink" title="Basic commands for FFmpeg"></a>Basic commands for FFmpeg</h2><h3 id="Change-media-file-container"><a href="#Change-media-file-container" class="headerlink" title="Change media file container"></a>Change media file container</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-i</span> input.flv <span class="token parameter variable">-codec</span> copy output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This command will change input media file’s container into your desire container. </p><h3 id="Force-encode"><a href="#Force-encode" class="headerlink" title="Force encode"></a>Force encode</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-i</span> input.flv <span class="token parameter variable">-strict</span> <span class="token parameter variable">-2</span> output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This command is experimental and might not product best outcome.</p><h3 id="Auto-insert-multiple-videos"><a href="#Auto-insert-multiple-videos" class="headerlink" title="Auto insert multiple videos"></a>Auto insert multiple videos</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-fflags</span> +discardcorrupt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Tip</strong>:This command will allow ffmpeg takes a flag which is discard corrupted data in input meida file.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-fflags</span> +discardcorrupt <span class="token parameter variable">-f</span> concat <span class="token parameter variable">-safe</span> <span class="token number">0</span> <span class="token parameter variable">-i</span> merge.txt <span class="token parameter variable">-c</span> copy output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This command will allow you to insert multiple videos to a single video file.</p><h3 id="Set-target-bitrate-and-audio-rate"><a href="#Set-target-bitrate-and-audio-rate" class="headerlink" title="Set target bitrate and audio rate"></a>Set target bitrate and audio rate</h3><pre class="line-numbers language-code" data-language="code"><code class="language-code">-b:a &#x2F;&#x2F;audio rate with unit-b:v &#x2F;&#x2F;video rate with unit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Cut-using-a-duration"><a href="#Cut-using-a-duration" class="headerlink" title="Cut using a duration"></a>Cut using a duration</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-i</span> input.mp4 <span class="token parameter variable">-ss</span> 00:08:20 <span class="token parameter variable">-t</span> 00:10:00 <span class="token parameter variable">-c:v</span> copy <span class="token parameter variable">-c:a</span> copy output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This command will take a input video <code>input.mp4</code>, and cut out 10 minutes from it starting from <code>00:08:20</code>.<br>For example, if it cut from <code>00:08:20</code>, the output video file will have duration from <code>00:08:20</code> to <code>00:18:20</code>.</p><p><code>-ss</code> specifies the starting position and -t specifies the duration from the start position. In the above command, we cut 10 minutes from the <code>00:08:20</code> mark.</p><p>The <code>-c:v copy -c:a copy</code> commands copy the original audio and video without re-encoding.</p><p>To specify time, you can use two different time unit formats: sexagesimal (<code>HOURS:MM:SS.MILLISECONDS</code>, e.g. <code>01:23:45.678</code>), or in seconds. If using the former, you can leave out the milliseconds <code>HOURS:MM:SS</code> as we did in our example.</p><p>If you specify a duration that will result in a stop time that is beyond the length of the input video, the output video will end where the input video ends.</p><h3 id="Cut-using-a-specific-time"><a href="#Cut-using-a-specific-time" class="headerlink" title="Cut using a specific time"></a>Cut using a specific time</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-i</span> input.mp4 <span class="token parameter variable">-ss</span> 00:08:20 <span class="token parameter variable">-to</span> 00:20:20 <span class="token parameter variable">-c:v</span> copy <span class="token parameter variable">-c:a</span> copy output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This command uses <code>to</code> to specify an exact time to cut to from the starting position. The cut video will be from <code>00:08:20</code> to <code>00:20:20</code>, resulting in a 12 minutes video.</p><p>If you specify a time <code>-to</code> that is longer than the input video, e.g. <code>-to 00:35:00</code> when the input video is 20 minutes long, the cut video will end where the input video ends. If you specify a <code>-to</code> that is smaller than -ss, then the command won’t run. You’ll get the following error: <code>Error: -to value smaller than -ss; aborting</code>.</p><p>Note that if you specify <code>-ss</code> before <code>-i</code>, <code>-to</code> will have the same effect as <code>-t</code>, i.e. it will act as a duration.</p><h3 id="Cut-the-end-of-a-video"><a href="#Cut-the-end-of-a-video" class="headerlink" title="Cut the end of a video"></a>Cut the end of a video</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-sseof</span> <span class="token parameter variable">-500</span> <span class="token parameter variable">-i</span> input.mp4 <span class="token parameter variable">-c</span> copy output.mp4$ ffmpeg <span class="token parameter variable">-sseof</span> -00:10:00 <span class="token parameter variable">-i</span> input.mp4 <span class="token parameter variable">-c</span> copy output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Both of the above two commands will make a cut of the last 10 minutes of the input video.</p><p>If you use a time that is longer than the input video, e.g. <code>-01:10:00</code> for a 20 minute video, the command will still run. The output video will be the same length as the input.</p><h3 id="Use-hardware-acceleration"><a href="#Use-hardware-acceleration" class="headerlink" title="Use hardware acceleration"></a>Use hardware acceleration</h3><p>Using NVIDIA cuda example:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-hwaccel</span> cuda <span class="token parameter variable">-i</span> input.mp4 output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example for using hardware acceleration and keep output video in 30 fps constant framerate(NVIDIA verson):</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-hwaccel</span> cuda <span class="token parameter variable">-i</span> inoput.mp4 <span class="token parameter variable">-filter:v</span> 30fps output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><b>For Mac</b><br><p>Using <code>h264_videotoolbox</code> to enable hardware accelertaion.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-i</span> input.mp4 <span class="token parameter variable">-c:v</span> h264_videotoolbox b:v 10M output.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Adding-image-and-subtitle-to-a-audio-file-and-output-as-video"><a href="#Adding-image-and-subtitle-to-a-audio-file-and-output-as-video" class="headerlink" title="Adding image and subtitle to a audio file and output as video"></a>Adding image and subtitle to a audio file and output as video</h3><h4 id="Single-image-with-audio"><a href="#Single-image-with-audio" class="headerlink" title="Single image with audio"></a>Single image with audio</h4><p>If adding audio (e.g <code>audio.wav</code>) with one single image and output as a video, you need to add <code>-shortest</code> to tell <code>ffmpeg</code> to stop after audio stream is ended. Using internal AAC encoder as example, but can use <a href="https://trac.ffmpeg.org/wiki/AACEncodingGuide">any other supported AAC encoder</a> as well:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-loop</span> <span class="token number">1</span> <span class="token parameter variable">-i</span> img.jpg <span class="token parameter variable">-i</span> audio.wav <span class="token parameter variable">-c:v</span> libx264 <span class="token parameter variable">-c:a</span> aac <span class="token parameter variable">-b:a</span> 192k <span class="token parameter variable">-shortest</span> out.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If you want to set the frame size of the video. Add <code>-vf scale=1920:1080</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-loop</span> <span class="token number">1</span> <span class="token parameter variable">-i</span> img.jpg <span class="token parameter variable">-i</span> audio.wav <span class="token parameter variable">-c:v</span> libx264 <span class="token parameter variable">-c:a</span> aac <span class="token parameter variable">-b:a</span> 192k <span class="token parameter variable">-shortest</span> <span class="token parameter variable">-vf</span> <span class="token assign-left variable">scale</span><span class="token operator">=</span><span class="token number">1920</span>:1080 out.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If your audio file is using a codec that the output container supports (e.g. MP3 audio in AVI or M4A&#x2F;AAC audio in MP4), you can <a href="https://ffmpeg.org/ffmpeg.html#Stream-copy">stream copy</a> (re-mux) it instead of re-encoding, which will preserve the audio quality:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-loop</span> <span class="token number">1</span> <span class="token parameter variable">-i</span> img.jpg <span class="token parameter variable">-i</span> audio.m4a <span class="token parameter variable">-c:v</span> libx264 <span class="token parameter variable">-c:a</span> copy <span class="token parameter variable">-shortest</span> out.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Adding-subtitle-to-video"><a href="#Adding-subtitle-to-video" class="headerlink" title="Adding subtitle to video"></a>Adding subtitle to video</h4><p>There is two way of adding subtitle to a video. First one is to add it as <strong>hard subtitle</strong> which is burn captions into the video. Second one is to add it as <strong>soft subtitle</strong> that viewers can turn it on or off. <br></p><h5 id="Hard-subtitle"><a href="#Hard-subtitle" class="headerlink" title="Hard subtitle"></a>Hard subtitle</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-i</span> sample_video_ffmpeg.mp4 <span class="token parameter variable">-vf</span> <span class="token assign-left variable">ass</span><span class="token operator">=</span>output_subtitle.ass output_ass.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If you don’t want to re-render the audio source, add <code>-c:a copy</code>. Since you want to add subttile to the video as hard way, you cannot use <code>-c:v copy</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-i</span> video.mp4 <span class="token parameter variable">-c:a</span> copy <span class="token parameter variable">-vf</span> <span class="token assign-left variable">ass</span><span class="token operator">=</span>output_subtitle.ass out.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Soft-subtitle"><a href="#Soft-subtitle" class="headerlink" title="Soft subtitle"></a>Soft subtitle</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ffmpeg <span class="token parameter variable">-i</span> video.mp4 <span class="token parameter variable">-i</span> subtitle.srt <span class="token parameter variable">-c</span> copy <span class="token parameter variable">-c:s</span> mov_text -metadata:s:s:0 <span class="token assign-left variable">language</span><span class="token operator">=</span>eng out.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The <code>-c:s mov_text</code> option sets the input video file format to the <code>MOV_TEXT</code> format.</p><p>We’re also using the <code>-metadata:s:s:0</code> option, which sets metadata for Stream:Subtitle: Number of the stream, starting with 0.</p><p>Finally, the <code>language=eng</code> option sets the subtitle language to English.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font color="#eb9036"><ins>Reference</ins></font></h3><p><a href="https://shotstack.io/learn/use-ffmpeg-to-trim-video/">How to trim a video using FFmpeg</a></p><p><a href="https://www.martin-riedl.de/2020/12/06/using-hardware-acceleration-on-macos-with-ffmpeg/">Using Hardware Acceleration on MacOS with FFmpeg</a></p><p><a href="https://trac.ffmpeg.org/wiki/Slideshow">Slideshow</a></p><p><a href="https://www.baeldung.com/linux/subtitles-ffmpeg">How to Embed Subtitles into a Video Using FFmpeg</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
            <tag> EN </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test post</title>
      <link href="/2023/01/09/test-post/"/>
      <url>/2023/01/09/test-post/</url>
      
        <content type="html"><![CDATA[<h2 id="This-is-a-test-post"><a href="#This-is-a-test-post" class="headerlink" title="This is a test post."></a>This is a test post.</h2>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
